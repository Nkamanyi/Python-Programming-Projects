Question 1
Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.

name = input("Enter your name: ")
age = input("Enter your age: ")
age = int(age)
future_year = 100 - age
print(name + " you will turn 100 years old in " + str(future_year) + " years time.")

#data from input() function is string even if the data is a number.
#To do arithmetic calculation, the number needs to be converted to integer using int().
#We can only add strings (concatenation) and not string and integer.

Question2
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.

num = input("Enter a number: ")
if int(num) % 2 == 0:
    print(num + " is an even number.")
else:
    print(num + " is an odd number.")
    
Question 3
Take a list, say for example this one:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
for num in a:
    if num < 5:
        print(num)
        
Question 4
Create a program that asks the user for a number and then prints out a list of all the divisors of that number.

num = int(input("Enter a number: "))

range_of_list = range(1,num+1)
list_of_divisors = []

for number in range_of_list:
    if num % number == 0:
        list_of_divisors.append(number)
        
print(list_of_divisors)

Question 5
Take two lists, say for example these two:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

list_of_common_numbers = []

for num in b:
    if num in a:
        list_of_common_numbers.append(num)

print(list_of_common_numbers)

# If statement also search for elemnts in a different list.

Question 6
Ask the user for a string and print out whether this string is a palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)

name = input("Enter the name of an animal: ")

reverse = name[::-1]
print(reverse)
if name == reverse:
    print(name + "is a palindrome")
else:
    print(name + "is not a palindrome")
#[:] use this to read all the elemnts in a list
#[::2] use this to count how often you read the elements in a list moving forward.
#[::-1] use this to count how often you read the elements in a list moving backward.

Question 7
Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
list_of_even_num = []
for num in a:
    if num % 2 == 0:
        list_of_even_num.append(num)

print(list_of_even_num)

#To write the same code in one line of python,

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

list_of_even_num = [num for num in a if num % 2 ==0]

print(list_of_even_num)

Question 8
Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.

import random

random_num = random.randint(1,9)
guess_num = int(input("Enter a guess number: "))

if guess_num == random_num:
    print("You guessed exactly right.")
    
elif guess_num > random_num:
    print("You guessed too high.")
    
else:
    print("You guessed too low.")
    
Question 9
Generate two lists of random numbers and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this using at least one list comprehension.

import random

a = random.sample(range(1, 90),12)
print(a)
b = random.sample(range(1, 90),14)
print(b)

list_of_common_num = [num for num in b if num in a]

print(list_of_common_num)

Question 10
Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password.

import random

samp = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?"
passw = " ".join(random.sample(samp, 8))
print(passw)

Question 11
The price of a house is $1M. If the buyer has good credit,t he needs to put down 10% otherwise, they need to put down 20%. Print the down payment.

good_credit = True
down_payment1 = str(1000000 * 0.1)
down_payment2 = str(1000000 * 0.2)

if good_credit:
    print("The down payment is $" + down_payment1)
else:
    print("The down payment is $" + down_payment2)

Question 12
If name is less than 3 character long, print name must be at least 3 characters. otherwise if it is more 50 characters long, print name can be a maximum of 50 characters. otherwise, name looks good.

nam = input("Enter your name: ")

if len(nam) < 3:
    print("Name must be at least 3 characters.")
elif len(nam) > 50:
    print("Name can be a maximum of 50 characters.")
else:
    print("Name looks good.")
    
Question 13
Program the ask the user's weight and convert it to kg or lbs depending on whether the input is in kg or lbs.

weight = int(input("Enter your weight: "))
measurement = (input("Weight in lbs or kg: ")).lower()
if measurement == "lbs":
    print("your weight is " + str(weight * 0.45) + "kg")
else:
    print("Your weight is " + str(weight / 0.45) + "lbs")

Question 14
A guessing game that guess the right number from 1 - 3.

import random

rand_num = random.randint(1,3)
guess_round = 1
while guess_round <= 3:
    guess = int(input("Enter a guess number from 1 - 3: "))
    guess_round += 1
    if guess == rand_num:
        print("Great job! you won.")
        break
else:
    print("You lose! try again.")
    
Question 15
Car game

message = ""
started = False
while message != quit:
    message = input("Car: what can I do for you? ").lower()

    if message == "start":
        if started:
            print("Car is already started!")
        else:
            started = True
            print("Car started.....ready to go!")
    elif message == "stop":
        if not started:
            print("Car is already stopped!")
        else:
            print("Car stopped.")
    elif message == "help":
        print("""
start - to start the car.
stop - to stop the car.
quit - to quit.""")
    elif message == "quit":
        break
    else:
        print("I don't understand that...")


Question 16
Result of 3 prices in a list 
price = [10, 20, 30]

price = [10, 20, 30]
result = 0
for num in price:
    result += num
print(f"result : {result}")

Question 17
write a program to find the largest number in a list.
num = [30, 5, 10, 80, 4, 12] 

numbers = [30, 5, 10, 80, 4, 12]
max_num = numbers[0]
for num in numbers:
    if num > max_num:
        max_num = num
print(max_num)

Question 18
write a program to remove the duplicate in a list.

numbers = [30, 5, 10, 80, 4, 12, 30, 80, 12]
no_duplicate = []
for num in numbers:
    if num not in no_duplicate:
        no_duplicate.append(num)

print(no_duplicate)

Question 19
Write a function called digit_sum that takes a positive integer n as input and returns the sum of all that number’s digits.

def digit_sum(n):
  total = 0
  string_n = str(n)
  for char in string_n:
    total += int(char)
  return total
  
  Question 20
  factorial of a non negative number.
  
  def factorial(x):
    total = 1
    while x>0:
        total *= x
        x-=1
    return total
  
print factorial(5)

Question 21
prime number

def is_prime(x):
    if x < 2:
        return False
    else:
        for n in range(2, x-1):
            if x % n == 0:
                return False
        return True

print is_prime(13)
print is_prime(10)

Question 22
reverse function of a string

def reverse(text):
    rev = text[::-1]
    return rev

print(reverse("my name"))

Question 23
anti vowel 

def anti_vowel(text):
    result = ""
    for char in text:
          if char not in "ieaouIEAOU":
            result += char
    return result
print(anti_vowel("hello book"))

Question 24
count 

def count(sequence, item):
    count = 0
    for i in sequence:
        if i == item:
            count += 1
    return count
  
print count([1, 2, 1, 1], 1)

Question 25
purify

def purify(lst):
    res = []
    for ele in lst:
        if ele % 2 == 0:
            res.append(ele)
    return res
  
print purify([1, 2, 3, 4])

Question 26
product

def product(list):
  total = 1
  for num in list:
    total *= num
  return total

print(product([4, 5, 5]))

Question 27
median of a list

def median(lst):
    sorted_list = sorted(lst)
    if len(sorted_list) % 2 != 0:
        #odd number of elements
        index = len(sorted_list)//2 
        return sorted_list[index]
    elif len(sorted_list) % 2 == 0:
        #even no. of elements
        index_1 = len(sorted_list)/2 - 1
        index_2 = len(sorted_list)/2
        mean = (sorted_list[index_1] + sorted_list[index_2])/2.0
        return mean
   
print(median([2, 4, 5, 9]))

Question 28
Add the numbers in a list

grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def grades_sum(scores):
  sum = 0
  for score in scores:
    sum += score
  return sum

print(grades_sum(grades))

Question 29
Determining the factorial for a non-negative number.

def FirstFactorial(num):
    fact = 1
    for i in range(1, num+1):
        fact *= i
    return fact

print(FirstFactorial(6))

Question 30
create a function that reverse a string.

def FirstReverse(str):
    for chr in str:
        return str[::-1]
        
print FirstReverse(raw_input())  

Question 31
Addition of numbers.

def SimpleAdding(num):
    total = 0
    for i in range(1, num+1):
        total += i
    return total

    
print(SimpleAdding(raw_input())  

Question 32
Capitalize the first letter of each wordin a string

def LetterCapitalize(str):
    
    return " ".join([i.capitalize() for i in str.split()])

print LetterCapitalize(raw_input())

Question 33
Form a string with letters in alphabetical order.

def AlphabetSoup(str): 
    return "".join(sorted([i for i in str]))

print AlphabetSoup(raw_input())

Question 34
Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string.

def LetterChanges(s):
    result = ""
    for i in s:
        if i.isalpha():
            if i == 'z':
                i = 'a'
            elif i == 'Z':
                i = 'A'
            else:
                i = chr(ord(i) + 1)
            if i in 'aeiou':
                i = i.upper()
        result += i

    return result


print(LetterChanges("The weather is bright"))

Question 35
Determine if every alphabetic character in a string has a plus (+) symbol on the left and right side of itself. For example: the string "+a+b+c+" is good but the string "===+3+f=+b+" is not because the "f" does not have a plus symbol to its right.

def SimpleSymbols(str):
    for i in range(0, len(str)):
        if str[i].isalpha():
            if str[i-1] != "+" or str[1+1] != "+":
                return "false"
            else:
                return "true"

print(SimpleSymbols("+d+=3=+s+"))

Question 36
Complete the solution so that it reverses all of the words within the string passed in.

def reverseWords(str):
    return " ".join(reversed(str.split()))

print(reverseWords("Coding is exciting"))

or

def reverseWords(str):
    return " ".join(str.split()[::-1])

print(reverseWords("The lord is good"))

# The split() does not work with integers but only with strings. For a single text/word or number of string the split() function gives the same string, for a sentence of words or group/list of numbers, the split() function split them up.

Question 37
Complete the function that accepts a string parameter, and reverses each word in the string. All spaces in the string should be retained.

def reverse_words(text):
    return " ".join(i[::-1] for i in text.split(" "))


print(reverse_words("The lord is good"))

Questin 38
You need to write a function that reverses the words in a given string. A word can also fit an empty string.

def reverse(st):
   return " ".join(st.split()[::-1])
   
print(st("The lord is good"))

Question 39
Impliment the reverse function, which takes in input n and reverses it. For instance, reverse(123) should return 321. You should do this without converting the inputted number into a string.

def reverse(n):
    return int(str(n)[::-1])
print(reverse(123))

Question 40
Complete the solution so that it reverses the string value passed into it.

def solution(str):
  return str[::-1]
  
print(solution("world"))

Question 41
Find the nearest square number, nearest_sq(n), of a positive integer n.

def nearest_sq(n):
    return round(n ** 0.5) ** 2
print(nearest_sq())

or

def nearest_sq(n):
    import math
    m = round(math.sqrt(n))
    return m * m
    
print(nearest_sq())

Question 42
Create a method is_uppercase() to see whether the string is ALL CAPS.

def is_uppercase(inp):
    return inp.isupper()
    
print(is_uppercase("The Lord is good"))

or

def is_uppercase(inp):
  if inp.isupper():
    return True
  else:
    return False

print(is_uppercase("The Lord is good"))

Question 43
Complete the square sum function so that it squares each number passed into it and then sums the results together.
For example, for [1, 2, 2] it should return 9 because 1^2 + 2^2 + 2^2 = 9.

def square_sum(numbers):
    return sum(num ** 2 for num in numbers)

print(square_sum([1, 2, 7, 10, 2]))

or 

def square_sum(numbers):
  sum = 0
  for num in numbers:
       sum += num ** 2
  return sum
  
print(square_sum([1, 2, 7, 10, 2]))

Question 44
Given a number n, return the number of positive odd numbers below n.

def odd_count(n):
    return len(range(n)[1::2])
    
print(oddCount())

or 

def oddCount(n):
    return n // 2
    
print(oddCount())

Question 45
There was a test in your class and you passed it. Congratulations!
But you're an ambitious person. You want to know if you're better than the average student in your class.
You receive an array with your peers' test scores. Now calculate the average and compare your score!

Return True if you're better, else False!

Note:
Your points are not included in the array of your class's points. For calculating the average point you may add your point to the given array!

import statistics

def better_than_average(class_points, your_points):
    return your_points > statistics.mean(class_points)

print(better_than_average([12, 23, 34, 45, 56, 67, 78, 89, 90], 69))

or   

def better_than_average(class_points, your_points):
    return your_points > sum(class_points) / len(class_points)
    
print(better_than_average([12, 23, 34, 45, 56, 67, 78, 89, 90], 69))

Question 46
Write a method smash that takes an array of words and smashes them together into a sentence and returns the sentence. You can ignore any need to sanitize words or add punctuation, but you should add spaces between each word. Be careful, there shouldn't be a space at the beginning or the end of the sentence!

def smash(words):
    return " ".join(words)
    
print(smash(['hello', 'world', 'this', 'is', 'great']))

Question 47
Our football team finished the championship. The result of each match look like "x:y". Results of all matches are recorded in the collection.

For example: ["3:1", "2:2", "0:1", ...]

Write a function that takes such collection and counts the points of our team in the championship. Rules for counting points for each match:

if x>y - 3 points
if x<y - 0 point
if x=y - 1 point
Notes:

there are 10 matches in the championship
0 <= x <= 4
0 <= y <= 4

def points(games):
    count = 0
    for score in games:
        res = score.split(':')
        if res[0]>res[1]:
            count += 3
        elif res[0] == res[1]:
            count += 1
    return count
print(point(["3:1", "2:2", "0:1"]))

or

def points(games):
    return sum(3 if x > y else 0 if x < y else 1 for x, y in (score.split(":") for score in games))
    
print(point(["3:1", "2:2", "0:1"]))

Question 48
We need a function that can transform a string into a number. What ways of achieving this do you know?

def string_to_number(s):
    return int(s)
    
print(string_to_numbers("123"))

Question 49
Suzuki is a monk who climbs a large staircase to the monastery as part of a ritual. Some days he climbs more stairs than others depending on the number of students he must train in the morning. He is curious how many stairs might be climbed over the next 20 years and has spent a year marking down his daily progress.

The sum of all the stairs logged in a year will be used for estimating the number he might climb in 20.

20_year_estimate = one_year_total * 20

You will receive the following data structure representing the stairs Suzuki logged in a year. You will have all data for the entire year so regardless of how it is logged the problem should be simple to solve.

stairs = [sunday,monday,tuesday,wednesday,thursday,friday,saturday]
Make sure your solution takes into account all of the nesting within the stairs array.

Each weekday in the stairs array is an array.

sunday = [6737, 7244, 5776, 9826, 7057, 9247, 5842, 5484, 6543, 5153, 6832, 8274, 7148, 6152, 5940, 8040, 9174, 7555, 7682, 5252, 8793, 8837, 7320, 8478, 6063, 5751, 9716, 5085, 7315, 7859, 6628, 5425, 6331, 7097, 6249, 8381, 5936, 8496, 6934, 8347, 7036, 6421, 6510, 5821, 8602, 5312, 7836, 8032, 9871, 5990, 6309, 7825]
Your function should return the 20 year estimate of the stairs climbed using the formula above.

def stairs_in_20(stairs):
    total = 0
    for day in stairs:
        for num in day:
            total += num
    return total * 20
    
print(stairs_in_20())

or 

def stairs_in_20(stairs):
    return sum(sum(day) for day in stairs) * 20

print(stairs_in_20())

or

def stairs_in_20(stairs):
    return 20 * sum(n for day in stairs for n in day)
    
print(stairs_in_20())

Question 50

def expression_matter(a, b, c):
    return max(a*b*c, a+b+c, (a+b)*c, a*(b+c))
   
print(expression_matter(1,2,3))

# the max() functions works for a list of numbers, numbers in bracket and even numbers without list or bracket. a = [2, 3, 9, 10], a = (2, 3, 9, 10) and a = 2, 3, 9, 10
or 

def expression_matter(a, b, c): return max(a*b*c, a+b+c, a*(b+c), (a+b)*c)

print(expression_matter(1,2,3))

Question 51
def bin_to_decimal(inp):
    return int(inp, 2)
    
print(bin_to_decimal("1011"))

Question 52
Given a string of digits, you should replace any digit below 5 with '0' and any digit 5 and above with '1'. Return the resulting string.

def fake_bin(x):
    return ''.join('0' if i < '5' else '1' for i in x)
   
    
print(fake_bin())

or

def fake_bin(x):
    res = ""
    for num in x:
        if int(num) < 5:
            res += "0"
        else:
            res += "1"
    return res
    
print(fake_bin())

or

def fake_bin(s):
  return ''.join('0' if int(c) < 5 else '1' for c in s)

print(fake_bin())

Question 53
Write a function which takes a number and returns the corresponding ASCII char for that value.

def get_char(c):
    return chr(c)
    
print(get_char(65))

Question 54
def set_alarm(employed, vacation):
    return employed and not vacation
    
print(set_alarm())

or 

def set_alarm(employed, vacation):
    if employed and not vacation:
        return True
    else:
        return False
        
  print(set_alarm())
  
  Question 55
  Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.
  
 def summation(num):
   return sum(x for x in range(1, num+1))
    
 print(summation(4))
 
 or
 
 def summation(num):
    return sum(xrange(num + 1))
    
 print(summation(4))   
 
 or 
 
 def summation(num):
    return sum(range(1,num+1))
    
 def summation(num):
   return sum(range(num + 1))
   
 print(summation(4)) 
 
 or
 
 def summation(num):
    result = 0
    for i in range(1, num + 1):
        result += i
    return result
    
 print(summation(4))
  
  Question 56
  Given 2 elevators (named "left" and "right") in a building with 3 floors (numbered 0 to 2), write a function elevator accepting 3 arguments (in order):

left - The current floor of the left elevator
right - The current floor of the right elevator
call - The floor that called an elevator
It should return the name of the elevator closest to the called floor ("left"/"right").

In the case where both elevators are equally distant from the called floor, choose the elevator to the right.

You can assume that the inputs will always be valid integers between 0-2.


  def elevator(left, right, call):
    return "left" if abs(call - left) < abs(call - right) else "right"
    
  print(elevator())
    
  or
  
  def elevator(left, right, call):
    if abs(left-call) >= abs(right-call):
        return "right"
    else:
        return "left"
        
  print(elevator())
  
  Questions 57
  Write a function, gooseFilter/goose_filter/GooseFilter, that takes an array of strings as an argument and returns a filtered array containing the same elements but with the 'geese' removed.

The geese are any strings in the following array, which is pre-populated in your solution:

geese = ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
For example, if this array were passed as an argument:

["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]
Your function would return the following array:

["Mallard", "Hook Bill", "Crested", "Blue Swedish"]
The elements in the returned array should be in the same order as in the initial array passed to your function, albeit with the 'geese' removed. Note that all of the strings will be in the same case as those provided, and some elements may be repeated.


geese = {"African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"}

def goose_filter(birds):
    return [bird for bird in birds if bird not in geese]
    
print(goode_filter())

or

geese = ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
def goose_filter(birds):
    res = []
    for bird in birds:
        if bird not in geese:
            res.append(bird)
    return res
    
print(goode_filter())

Question 58
def is_vow(inp):
    return [chr(num) if chr(num) in "aeiou" else num for num in inp]
    
print(is_vow())
Create a combat function that takes the player's current health and the amount of damage recieved, and returns the player's new health. Health can't be less than 0.

def combat(health, damage):
    return max(0, health-damage)
    
print(combat())

or 

def combat(health, damage):
    if damage > health:
        return 0
    return health - damage

print(combat())

Question 59
def simple_multiplication(number) :
    return (number * 8 if number % 2 == 0 else number * 9)
    
print(simple_multiplication(6))

Question 60
Introduction
The first century spans from the year 1 up to and including the year 100, The second - from the year 101 up to and including the year 200, etc.

Task :
Given a year, return the century it is in.

def century(year):
    return (year + 99) // 100
    
print(century(1705))

or
    
import math

def century(year):
    return math.ceil(year / 100)
    
print(century(1705))

or 

from math import ceil

def century(year):
    return ceil(year / 100)

print(century(1705))

Question 61
Given an array of integers, return a new array with each value doubled.

For example:

[1, 2, 3] --> [2, 4, 6]

For the beginner, try to use the map method - it comes in very handy quite a lot so is a good one to know.

def maps(a):
    return [2 * x for x in a]

print(maps())

def maps(a):
    return map(lambda w:2*w, a)

print(maps())

Question 62
Create a function with two arguments that will return a list of length (n) with multiples of (x).

Assume both the given number and the number of times to count will be positive numbers greater than 0.

Return the results as an array (or list in Python, Haskell or Elixir).

Examples:

count_by(1,10) #should return [1,2,3,4,5,6,7,8,9,10]
count_by(2,5) #should return [2,4,6,8,10]

def count_by(x, n):
    return [i * x for i in range(1, n + 1)]
    
print(count_by(2, 7))

Question 63
Complete the function which takes two arguments and returns all numbers which are divisible by the given divisor. First argument is an array of numbers and the second is the divisor.

Example
divisible_by([1, 2, 3, 4, 5, 6], 2) == [2, 4, 6]

def divisible_by(numbers, divisor):
    return [num for num in numbers if num % divisor == 0]

print(divisible_by([1, 2, 3, 4, 5, 6], 2))

Question 64
Given a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.

invert([1,2,3,4,5]) == [-1,-2,-3,-4,-5]
invert([1,-2,3,-4,5]) == [-1,2,-3,4,-5]
invert([]) == []
You can assume that all values are integers. Do not mutate the input array/list.

def invert(lst):
    return [num * -1 for num in lst]

print(invert([1,-2,3,-4,5]))

or

def invert(lst):
    return [-w for w in lst]
    
print(invert([1,-2,3,-4,5]))

or

def invert(l): return [-n for n in l]
print(invert([1,-2,3,-4,5]))

Question 65
Write a function that returns the total surface area and volume of a box as an array: [area, volume].

def get_size(w,h,d):
    return [2*(w*h+w*d+h*d), w*h*d]

print(get_size(2,3,5))
    
    or
    
def get_size(w, h, d):
    area = 2*(w*h + h*d + w*d)
    volume = w*h*d
return [area, volume]

print(get_size(2,3,5))

Question 66
In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?

Example:

make_negative(1);  # return -1
make_negative(-5); # return -5
make_negative(0);  # return 0

def make_negative( number ):
    return -abs(number)

print(make_negative(-5))

    or
    
def make_negative( number ):
    return -number if number>0 else number

print(make_negative(-5))

Question 67

def enough(cap, on, wait):
    return (0 if cap-on > wait else wait-(cap-on))
    
print(enough(100,60,50))

or

def enough(cap, on, wait):
    return max(0, wait - (cap - on))

print(enough(100,60,50))

Question 68
You take your son to the forest to see the monkeys. You know that there are a certain number there (n), but your son is too young to just appreciate the full number, he has to start counting them from 1.

As a good parent, you will sit and count with him. Given the number (n), populate an array with all numbers up to and including that number, but excluding zero.

For example, if n = 10:

return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def monkey_count(n):
    return [x for x in range(1, n + 1)]
    
 print(monkey_count(8))
 
 or
 
def monkey_count(n):
    return list(range(1,n+1))

print(monkey_count(8))

Question 69
Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.

This function should take two arguments: exam - grade for exam (from 0 to 100); projects - number of completed projects (from 0 and above);

This function should return a number (final grade). There are four types of final grades:

100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.
90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.
75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.
0, in other cases

def final_grade(exam, projects):
    if exam > 90 or projects > 10:
        return 100
    elif exam > 75 and projects >= 5:
        return 90
    elif exam > 50 and projects >= 2:
        return 75
   else:
        return 0

print(final_grade(90,7))

or

def final_grade(exam, projects):
  if exam > 90 or  projects > 10: return 100
  if exam > 75 and projects >= 5: return 90
  if exam > 50 and projects >= 2: return 75
  return 0
  
print(final_grade(90,7))

Question 70
In this programming exercise, you're going to learn about functions, boolean (true/false) values, strings, and the if-statement.

A function is a block of code that takes an input and produces an output. In this example, boolean_to_string is a function whose input is either true or false, and whose output is the string representation of the input, either "true"/"True" or "false"/"False" (check the sample tests about what capitalization to use in a given language).

A common idea we often want to represent in code is the concept of true and false. A variable that can either be true or false is called a boolean variable. In this example, the input to boolean_to_string (represented by the variable b) is a boolean.

Lastly, when we want to take one action if a boolean is true, and another if it is false, we use an if-statement.

def boolean_to_string(b):
    return "True" if b else "False"

print(boolean_to_string())

or

def boolean_to_string(b):
    if b:
        return "True"
    else:
        return "False"
        
print(boolean_to_string())

Question 71

def remove_char(s):
    return s[1 : -1]
    
print(remove_char(Elephan))

Question 72
You get an array of numbers, return the sum of all of the positives ones.

Example [1,-4,7,12] => 1 + 7 + 12 = 20

Note: if there is nothing to sum, the sum is default to 0.

def positive_sum(arr):
    return sum(x for x in arr if x > 0)
    
print(positive_sum([1,-4,7,12]))

Question 73
Character recognition software is widely used to digitise printed texts. Thus the texts can be edited, searched and stored on a computer.

When documents (especially pretty old ones written with a typewriter), are digitised character recognition softwares often make mistakes.

Your task is correct the errors in the digitised text. You only have to handle the following mistakes:

S is misinterpreted as 5
O is misinterpreted as 0
I is misinterpreted as 1
The test cases contain numbers only by mistake.


def correct(string):
    return string.translate(str.maketrans("501", "SOI"))
    
print(correct())

Question 74
