Question 1
Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.

name = input("Enter your name: ")
age = input("Enter your age: ")
age = int(age)
future_year = 100 - age
print(name + " you will turn 100 years old in " + str(future_year) + " years time.")

#data from input() function is string even if the data is a number.
#To do arithmetic calculation, the number needs to be converted to integer using int().
#We can only add strings (concatenation) and not string and integer.

Question2
Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.

num = input("Enter a number: ")
if int(num) % 2 == 0:
    print(num + " is an even number.")
else:
    print(num + " is an odd number.")
    
Question 3
Take a list, say for example this one:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
and write a program that prints out all the elements of the list that are less than 5.

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
for num in a:
    if num < 5:
        print(num)
        
Question 4
Create a program that asks the user for a number and then prints out a list of all the divisors of that number.

num = int(input("Enter a number: "))

range_of_list = range(1,num+1)
list_of_divisors = []

for number in range_of_list:
    if num % number == 0:
        list_of_divisors.append(number)
        
print(list_of_divisors)

Question 5
Take two lists, say for example these two:

  a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
  b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.

a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

list_of_common_numbers = []

for num in b:
    if num in a:
        list_of_common_numbers.append(num)

print(list_of_common_numbers)

# If statement also search for elemnts in a different list.

Question 6
Ask the user for a string and print out whether this string is a palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)

name = input("Enter the name of an animal: ")

reverse = name[::-1]
print(reverse)
if name == reverse:
    print(name + "is a palindrome")
else:
    print(name + "is not a palindrome")
#[:] use this to read all the elemnts in a list
#[::2] use this to count how often you read the elements in a list moving forward.
#[::-1] use this to count how often you read the elements in a list moving backward.

Question 7
Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
list_of_even_num = []
for num in a:
    if num % 2 == 0:
        list_of_even_num.append(num)

print(list_of_even_num)

#To write the same code in one line of python,

a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

list_of_even_num = [num for num in a if num % 2 ==0]

print(list_of_even_num)

Question 8
Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right.

import random

random_num = random.randint(1,9)
guess_num = int(input("Enter a guess number: "))

if guess_num == random_num:
    print("You guessed exactly right.")
    
elif guess_num > random_num:
    print("You guessed too high.")
    
else:
    print("You guessed too low.")
    
Question 9
Generate two lists of random numbers and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this using at least one list comprehension.

import random

a = random.sample(range(1, 90),12)
print(a)
b = random.sample(range(1, 90),14)
print(b)

list_of_common_num = [num for num in b if num in a]

print(list_of_common_num)

Question 10
Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters, numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password.

import random

samp = "abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?"
passw = " ".join(random.sample(samp, 8))
print(passw)

Question 11
The price of a house is $1M. If the buyer has good credit,t he needs to put down 10% otherwise, they need to put down 20%. Print the down payment.

good_credit = True
down_payment1 = str(1000000 * 0.1)
down_payment2 = str(1000000 * 0.2)

if good_credit:
    print("The down payment is $" + down_payment1)
else:
    print("The down payment is $" + down_payment2)

Question 12
If name is less than 3 character long, print name must be at least 3 characters. otherwise if it is more 50 characters long, print name can be a maximum of 50 characters. otherwise, name looks good.

nam = input("Enter your name: ")

if len(nam) < 3:
    print("Name must be at least 3 characters.")
elif len(nam) > 50:
    print("Name can be a maximum of 50 characters.")
else:
    print("Name looks good.")
    
Question 13
Program the ask the user's weight and convert it to kg or lbs depending on whether the input is in kg or lbs.

weight = int(input("Enter your weight: "))
measurement = (input("Weight in lbs or kg: ")).lower()
if measurement == "lbs":
    print("your weight is " + str(weight * 0.45) + "kg")
else:
    print("Your weight is " + str(weight / 0.45) + "lbs")

Question 14
A guessing game that guess the right number from 1 - 3.

import random

rand_num = random.randint(1,3)
guess_round = 1
while guess_round <= 3:
    guess = int(input("Enter a guess number from 1 - 3: "))
    guess_round += 1
    if guess == rand_num:
        print("Great job! you won.")
        break
else:
    print("You lose! try again.")
    
Question 15
Car game

message = ""
started = False
while message != quit:
    message = input("Car: what can I do for you? ").lower()

    if message == "start":
        if started:
            print("Car is already started!")
        else:
            started = True
            print("Car started.....ready to go!")
    elif message == "stop":
        if not started:
            print("Car is already stopped!")
        else:
            print("Car stopped.")
    elif message == "help":
        print("""
start - to start the car.
stop - to stop the car.
quit - to quit.""")
    elif message == "quit":
        break
    else:
        print("I don't understand that...")


Question 16
Result of 3 prices in a list 
price = [10, 20, 30]

price = [10, 20, 30]
result = 0
for num in price:
    result += num
print(f"result : {result}")

Question 17
write a program to find the largest number in a list.
num = [30, 5, 10, 80, 4, 12] 

numbers = [30, 5, 10, 80, 4, 12]
max_num = numbers[0]
for num in numbers:
    if num > max_num:
        max_num = num
print(max_num)

Question 18
write a program to remove the duplicate in a list.

numbers = [30, 5, 10, 80, 4, 12, 30, 80, 12]
no_duplicate = []
for num in numbers:
    if num not in no_duplicate:
        no_duplicate.append(num)

print(no_duplicate)

Question 19
Write a function called digit_sum that takes a positive integer n as input and returns the sum of all that number’s digits.

def digit_sum(n):
  total = 0
  string_n = str(n)
  for char in string_n:
    total += int(char)
  return total
  
  Question 20
  factorial of a non negative number.
  
  def factorial(x):
    total = 1
    while x>0:
        total *= x
        x-=1
    return total
  
print factorial(5)

Question 21
prime number

def is_prime(x):
    if x < 2:
        return False
    else:
        for n in range(2, x-1):
            if x % n == 0:
                return False
        return True

print is_prime(13)
print is_prime(10)

Question 22
reverse function of a string

def reverse(text):
    rev = text[::-1]
    return rev

print(reverse("my name"))

Question 23
anti vowel 

def anti_vowel(text):
    result = ""
    for char in text:
          if char not in "ieaouIEAOU":
            result += char
    return result
print(anti_vowel("hello book"))

Question 24
count 

def count(sequence, item):
    count = 0
    for i in sequence:
        if i == item:
            count += 1
    return count
  
print count([1, 2, 1, 1], 1)

Question 25
purify

def purify(lst):
    res = []
    for ele in lst:
        if ele % 2 == 0:
            res.append(ele)
    return res
  
print purify([1, 2, 3, 4])

Question 26
product

def product(list):
  total = 1
  for num in list:
    total *= num
  return total

print(product([4, 5, 5]))

Question 27
median of a list

def median(lst):
    sorted_list = sorted(lst)
    if len(sorted_list) % 2 != 0:
        #odd number of elements
        index = len(sorted_list)//2 
        return sorted_list[index]
    elif len(sorted_list) % 2 == 0:
        #even no. of elements
        index_1 = len(sorted_list)/2 - 1
        index_2 = len(sorted_list)/2
        mean = (sorted_list[index_1] + sorted_list[index_2])/2.0
        return mean
   
print(median([2, 4, 5, 9]))

Question 28
Add the numbers in a list

grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def grades_sum(scores):
  sum = 0
  for score in scores:
    sum += score
  return sum

print(grades_sum(grades))

Question 29
Determining the factorial for a non-negative number.

def FirstFactorial(num):
    fact = 1
    for i in range(1, num+1):
        fact *= i
    return fact

print(FirstFactorial(6))

Question 30
create a function that reverse a string.

def FirstReverse(str):
    for chr in str:
        return str[::-1]
        
print FirstReverse(raw_input())  

Question 31
Addition of numbers.

def SimpleAdding(num):
    total = 0
    for i in range(1, num+1):
        total += i
    return total

    
print(SimpleAdding(raw_input())  

Question 32
Capitalize the first letter of each wordin a string

def LetterCapitalize(str):
    
    return " ".join([i.capitalize() for i in str.split()])

print LetterCapitalize(raw_input())

Question 33
Form a string with letters in alphabetical order.

def AlphabetSoup(str): 
    return "".join(sorted([i for i in str]))

print AlphabetSoup(raw_input())

Question 34
Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string.

def LetterChanges(s):
    result = ""
    for i in s:
        if i.isalpha():
            if i == 'z':
                i = 'a'
            elif i == 'Z':
                i = 'A'
            else:
                i = chr(ord(i) + 1)
            if i in 'aeiou':
                i = i.upper()
        result += i

    return result


print(LetterChanges("The weather is bright"))

Question 35
Determine if every alphabetic character in a string has a plus (+) symbol on the left and right side of itself. For example: the string "+a+b+c+" is good but the string "===+3+f=+b+" is not because the "f" does not have a plus symbol to its right.

def SimpleSymbols(str):
    for i in range(0, len(str)):
        if str[i].isalpha():
            if str[i-1] != "+" or str[1+1] != "+":
                return "false"
            else:
                return "true"

print(SimpleSymbols("+d+=3=+s+"))

Question 36
Complete the solution so that it reverses all of the words within the string passed in.

def reverseWords(str):
    return " ".join(reversed(str.split()))

print(reverseWords("Coding is exciting"))

or

def reverseWords(str):
    return " ".join(str.split()[::-1])

print(reverseWords("The lord is good"))

# The split() does not work with integers but only with strings. For a single text/word or number of string the split() function gives the same string, for a sentence of words or group/list of numbers, the split() function split them up.

Question 37
Complete the function that accepts a string parameter, and reverses each word in the string. All spaces in the string should be retained.

def reverse_words(text):
    return " ".join(i[::-1] for i in text.split(" "))


print(reverse_words("The lord is good"))

Questin 38
You need to write a function that reverses the words in a given string. A word can also fit an empty string.

def reverse(st):
   return " ".join(st.split()[::-1])
   
print(st("The lord is good"))

Question 39
Impliment the reverse function, which takes in input n and reverses it. For instance, reverse(123) should return 321. You should do this without converting the inputted number into a string.

def reverse(n):
    return int(str(n)[::-1])
print(reverse(123))

Question 40
Complete the solution so that it reverses the string value passed into it.

def solution(str):
  return str[::-1]
  
print(solution("world"))

Question 41
Find the nearest square number, nearest_sq(n), of a positive integer n.

def nearest_sq(n):
    return round(n ** 0.5) ** 2
print(nearest_sq())

or

def nearest_sq(n):
    import math
    m = round(math.sqrt(n))
    return m * m
    
print(nearest_sq())

Question 42
Create a method is_uppercase() to see whether the string is ALL CAPS.

def is_uppercase(inp):
    return inp.isupper()
    
print(is_uppercase("The Lord is good"))

or

def is_uppercase(inp):
  if inp.isupper():
    return True
  else:
    return False

print(is_uppercase("The Lord is good"))

Question 43
Complete the square sum function so that it squares each number passed into it and then sums the results together.
For example, for [1, 2, 2] it should return 9 because 1^2 + 2^2 + 2^2 = 9.

def square_sum(numbers):
    return sum(num ** 2 for num in numbers)

print(square_sum([1, 2, 7, 10, 2]))

or 

def square_sum(numbers):
  sum = 0
  for num in numbers:
       sum += num ** 2
  return sum
  
print(square_sum([1, 2, 7, 10, 2]))

Question 44
Given a number n, return the number of positive odd numbers below n.

def odd_count(n):
    return len(range(n)[1::2])
    
print(oddCount())

or 

def oddCount(n):
    return n // 2
    
print(oddCount())

Question 45
There was a test in your class and you passed it. Congratulations!
But you're an ambitious person. You want to know if you're better than the average student in your class.
You receive an array with your peers' test scores. Now calculate the average and compare your score!

Return True if you're better, else False!

Note:
Your points are not included in the array of your class's points. For calculating the average point you may add your point to the given array!

import statistics

def better_than_average(class_points, your_points):
    return your_points > statistics.mean(class_points)

print(better_than_average([12, 23, 34, 45, 56, 67, 78, 89, 90], 69))

or   

def better_than_average(class_points, your_points):
    return your_points > sum(class_points) / len(class_points)
    
print(better_than_average([12, 23, 34, 45, 56, 67, 78, 89, 90], 69))

Question 46
Write a method smash that takes an array of words and smashes them together into a sentence and returns the sentence. You can ignore any need to sanitize words or add punctuation, but you should add spaces between each word. Be careful, there shouldn't be a space at the beginning or the end of the sentence!

def smash(words):
    return " ".join(words)
    
print(smash(['hello', 'world', 'this', 'is', 'great']))

Question 47
Our football team finished the championship. The result of each match look like "x:y". Results of all matches are recorded in the collection.

For example: ["3:1", "2:2", "0:1", ...]

Write a function that takes such collection and counts the points of our team in the championship. Rules for counting points for each match:

if x>y - 3 points
if x<y - 0 point
if x=y - 1 point
Notes:

there are 10 matches in the championship
0 <= x <= 4
0 <= y <= 4

def points(games):
    count = 0
    for score in games:
        res = score.split(':')
        if res[0]>res[1]:
            count += 3
        elif res[0] == res[1]:
            count += 1
    return count
print(point(["3:1", "2:2", "0:1"]))

or

def points(games):
    return sum(3 if x > y else 0 if x < y else 1 for x, y in (score.split(":") for score in games))
    
print(point(["3:1", "2:2", "0:1"]))

Question 48
We need a function that can transform a string into a number. What ways of achieving this do you know?

def string_to_number(s):
    return int(s)
    
print(string_to_numbers("123"))

Question 49
Suzuki is a monk who climbs a large staircase to the monastery as part of a ritual. Some days he climbs more stairs than others depending on the number of students he must train in the morning. He is curious how many stairs might be climbed over the next 20 years and has spent a year marking down his daily progress.

The sum of all the stairs logged in a year will be used for estimating the number he might climb in 20.

20_year_estimate = one_year_total * 20

You will receive the following data structure representing the stairs Suzuki logged in a year. You will have all data for the entire year so regardless of how it is logged the problem should be simple to solve.

stairs = [sunday,monday,tuesday,wednesday,thursday,friday,saturday]
Make sure your solution takes into account all of the nesting within the stairs array.

Each weekday in the stairs array is an array.

sunday = [6737, 7244, 5776, 9826, 7057, 9247, 5842, 5484, 6543, 5153, 6832, 8274, 7148, 6152, 5940, 8040, 9174, 7555, 7682, 5252, 8793, 8837, 7320, 8478, 6063, 5751, 9716, 5085, 7315, 7859, 6628, 5425, 6331, 7097, 6249, 8381, 5936, 8496, 6934, 8347, 7036, 6421, 6510, 5821, 8602, 5312, 7836, 8032, 9871, 5990, 6309, 7825]
Your function should return the 20 year estimate of the stairs climbed using the formula above.

def stairs_in_20(stairs):
    total = 0
    for day in stairs:
        for num in day:
            total += num
    return total * 20
    
print(stairs_in_20())

or 

def stairs_in_20(stairs):
    return sum(sum(day) for day in stairs) * 20

print(stairs_in_20())

or

def stairs_in_20(stairs):
    return 20 * sum(n for day in stairs for n in day)
    
print(stairs_in_20())

Question 50

def expression_matter(a, b, c):
    return max(a*b*c, a+b+c, (a+b)*c, a*(b+c))
   
print(expression_matter(1,2,3))

# the max() functions works for a list of numbers, numbers in bracket and even numbers without list or bracket. a = [2, 3, 9, 10], a = (2, 3, 9, 10) and a = 2, 3, 9, 10
or 

def expression_matter(a, b, c): return max(a*b*c, a+b+c, a*(b+c), (a+b)*c)

print(expression_matter(1,2,3))

Question 51
def bin_to_decimal(inp):
    return int(inp, 2)
    
print(bin_to_decimal("1011"))

Question 52
Given a string of digits, you should replace any digit below 5 with '0' and any digit 5 and above with '1'. Return the resulting string.

def fake_bin(x):
    return ''.join('0' if i < '5' else '1' for i in x)
   
    
print(fake_bin())

or

def fake_bin(x):
    res = ""
    for num in x:
        if int(num) < 5:
            res += "0"
        else:
            res += "1"
    return res
    
print(fake_bin())

or

def fake_bin(s):
  return ''.join('0' if int(c) < 5 else '1' for c in s)

print(fake_bin())

Question 53
Write a function which takes a number and returns the corresponding ASCII char for that value.

def get_char(c):
    return chr(c)
    
print(get_char(65))

Question 54
def set_alarm(employed, vacation):
    return employed and not vacation
    
print(set_alarm())

or 

def set_alarm(employed, vacation):
    if employed and not vacation:
        return True
    else:
        return False
        
  print(set_alarm())
  
  Question 55
  Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.
  
 def summation(num):
   return sum(x for x in range(1, num+1))
    
 print(summation(4))
 
 or
 
 def summation(num):
    return sum(xrange(num + 1))
    
 print(summation(4))   
 
 or 
 
 def summation(num):
    return sum(range(1,num+1))
    
 def summation(num):
   return sum(range(num + 1))
   
 print(summation(4)) 
 
 or
 
 def summation(num):
    result = 0
    for i in range(1, num + 1):
        result += i
    return result
    
 print(summation(4))
  
  Question 56
  Given 2 elevators (named "left" and "right") in a building with 3 floors (numbered 0 to 2), write a function elevator accepting 3 arguments (in order):

left - The current floor of the left elevator
right - The current floor of the right elevator
call - The floor that called an elevator
It should return the name of the elevator closest to the called floor ("left"/"right").

In the case where both elevators are equally distant from the called floor, choose the elevator to the right.

You can assume that the inputs will always be valid integers between 0-2.


  def elevator(left, right, call):
    return "left" if abs(call - left) < abs(call - right) else "right"
    
  print(elevator())
    
  or
  
  def elevator(left, right, call):
    if abs(left-call) >= abs(right-call):
        return "right"
    else:
        return "left"
        
  print(elevator())
  
  Questions 57
  Write a function, gooseFilter/goose_filter/GooseFilter, that takes an array of strings as an argument and returns a filtered array containing the same elements but with the 'geese' removed.

The geese are any strings in the following array, which is pre-populated in your solution:

geese = ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
For example, if this array were passed as an argument:

["Mallard", "Hook Bill", "African", "Crested", "Pilgrim", "Toulouse", "Blue Swedish"]
Your function would return the following array:

["Mallard", "Hook Bill", "Crested", "Blue Swedish"]
The elements in the returned array should be in the same order as in the initial array passed to your function, albeit with the 'geese' removed. Note that all of the strings will be in the same case as those provided, and some elements may be repeated.


geese = {"African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"}

def goose_filter(birds):
    return [bird for bird in birds if bird not in geese]
    
print(goode_filter())

or

geese = ["African", "Roman Tufted", "Toulouse", "Pilgrim", "Steinbacher"]
def goose_filter(birds):
    res = []
    for bird in birds:
        if bird not in geese:
            res.append(bird)
    return res
    
print(goode_filter())

Question 58
def is_vow(inp):
    return [chr(num) if chr(num) in "aeiou" else num for num in inp]
    
print(is_vow())
Create a combat function that takes the player's current health and the amount of damage recieved, and returns the player's new health. Health can't be less than 0.

def combat(health, damage):
    return max(0, health-damage)
    
print(combat())

or 

def combat(health, damage):
    if damage > health:
        return 0
    return health - damage

print(combat())

Question 59
def simple_multiplication(number) :
    return (number * 8 if number % 2 == 0 else number * 9)
    
print(simple_multiplication(6))

Question 60
Introduction
The first century spans from the year 1 up to and including the year 100, The second - from the year 101 up to and including the year 200, etc.

Task :
Given a year, return the century it is in.

def century(year):
    return (year + 99) // 100
    
print(century(1705))

or
    
import math

def century(year):
    return math.ceil(year / 100)
    
print(century(1705))

or 

from math import ceil

def century(year):
    return ceil(year / 100)

print(century(1705))

Question 61
Given an array of integers, return a new array with each value doubled.

For example:

[1, 2, 3] --> [2, 4, 6]

For the beginner, try to use the map method - it comes in very handy quite a lot so is a good one to know.

def maps(a):
    return [2 * x for x in a]

print(maps())

def maps(a):
    return map(lambda w:2*w, a)

print(maps())

Question 62
Create a function with two arguments that will return a list of length (n) with multiples of (x).

Assume both the given number and the number of times to count will be positive numbers greater than 0.

Return the results as an array (or list in Python, Haskell or Elixir).

Examples:

count_by(1,10) #should return [1,2,3,4,5,6,7,8,9,10]
count_by(2,5) #should return [2,4,6,8,10]

def count_by(x, n):
    return [i * x for i in range(1, n + 1)]
    
print(count_by(2, 7))

Question 63
Complete the function which takes two arguments and returns all numbers which are divisible by the given divisor. First argument is an array of numbers and the second is the divisor.

Example
divisible_by([1, 2, 3, 4, 5, 6], 2) == [2, 4, 6]

def divisible_by(numbers, divisor):
    return [num for num in numbers if num % divisor == 0]

print(divisible_by([1, 2, 3, 4, 5, 6], 2))

Question 64
Given a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.

invert([1,2,3,4,5]) == [-1,-2,-3,-4,-5]
invert([1,-2,3,-4,5]) == [-1,2,-3,4,-5]
invert([]) == []
You can assume that all values are integers. Do not mutate the input array/list.

def invert(lst):
    return [num * -1 for num in lst]

print(invert([1,-2,3,-4,5]))

or

def invert(lst):
    return [-w for w in lst]
    
print(invert([1,-2,3,-4,5]))

or

def invert(l): return [-n for n in l]
print(invert([1,-2,3,-4,5]))

Question 65
Write a function that returns the total surface area and volume of a box as an array: [area, volume].

def get_size(w,h,d):
    return [2*(w*h+w*d+h*d), w*h*d]

print(get_size(2,3,5))
    
    or
    
def get_size(w, h, d):
    area = 2*(w*h + h*d + w*d)
    volume = w*h*d
return [area, volume]

print(get_size(2,3,5))

Question 66
In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?

Example:

make_negative(1);  # return -1
make_negative(-5); # return -5
make_negative(0);  # return 0

def make_negative( number ):
    return -abs(number)

print(make_negative(-5))

    or
    
def make_negative( number ):
    return -number if number>0 else number

print(make_negative(-5))

Question 67

def enough(cap, on, wait):
    return (0 if cap-on > wait else wait-(cap-on))
    
print(enough(100,60,50))

or

def enough(cap, on, wait):
    return max(0, wait - (cap - on))

print(enough(100,60,50))

Question 68
You take your son to the forest to see the monkeys. You know that there are a certain number there (n), but your son is too young to just appreciate the full number, he has to start counting them from 1.

As a good parent, you will sit and count with him. Given the number (n), populate an array with all numbers up to and including that number, but excluding zero.

For example, if n = 10:

return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def monkey_count(n):
    return [x for x in range(1, n + 1)]
    
 print(monkey_count(8))
 
 or
 
def monkey_count(n):
    return list(range(1,n+1))

print(monkey_count(8))

Question 69
Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.

This function should take two arguments: exam - grade for exam (from 0 to 100); projects - number of completed projects (from 0 and above);

This function should return a number (final grade). There are four types of final grades:

100, if a grade for the exam is more than 90 or if a number of completed projects more than 10.
90, if a grade for the exam is more than 75 and if a number of completed projects is minimum 5.
75, if a grade for the exam is more than 50 and if a number of completed projects is minimum 2.
0, in other cases

def final_grade(exam, projects):
    if exam > 90 or projects > 10:
        return 100
    elif exam > 75 and projects >= 5:
        return 90
    elif exam > 50 and projects >= 2:
        return 75
   else:
        return 0

print(final_grade(90,7))

or

def final_grade(exam, projects):
  if exam > 90 or  projects > 10: return 100
  if exam > 75 and projects >= 5: return 90
  if exam > 50 and projects >= 2: return 75
  return 0
  
print(final_grade(90,7))

Question 70
In this programming exercise, you're going to learn about functions, boolean (true/false) values, strings, and the if-statement.

A function is a block of code that takes an input and produces an output. In this example, boolean_to_string is a function whose input is either true or false, and whose output is the string representation of the input, either "true"/"True" or "false"/"False" (check the sample tests about what capitalization to use in a given language).

A common idea we often want to represent in code is the concept of true and false. A variable that can either be true or false is called a boolean variable. In this example, the input to boolean_to_string (represented by the variable b) is a boolean.

Lastly, when we want to take one action if a boolean is true, and another if it is false, we use an if-statement.

def boolean_to_string(b):
    return "True" if b else "False"

print(boolean_to_string())

or

def boolean_to_string(b):
    if b:
        return "True"
    else:
        return "False"
        
print(boolean_to_string())

Question 71

def remove_char(s):
    return s[1 : -1]
    
print(remove_char(Elephan))

Question 72
You get an array of numbers, return the sum of all of the positives ones.

Example [1,-4,7,12] => 1 + 7 + 12 = 20

Note: if there is nothing to sum, the sum is default to 0.

def positive_sum(arr):
    return sum(x for x in arr if x > 0)
    
print(positive_sum([1,-4,7,12]))

Question 73
Character recognition software is widely used to digitise printed texts. Thus the texts can be edited, searched and stored on a computer.

When documents (especially pretty old ones written with a typewriter), are digitised character recognition softwares often make mistakes.

Your task is correct the errors in the digitised text. You only have to handle the following mistakes:

S is misinterpreted as 5
O is misinterpreted as 0
I is misinterpreted as 1
The test cases contain numbers only by mistake.


def correct(string):
    return string.translate(str.maketrans("501", "SOI"))
    
print(correct())

Question 74
If you can't sleep, just count sheep!!

Task:
Given a non-negative integer, 3 for example, return a string with a murmur: "1 sheep...2 sheep...3 sheep...". Input will always be valid, i.e. no negative integers.

def count_sheep(n):
    return "".join("%d sheep..." % (x) for x in range(1, n+1))
    
print(count_sheep(6))

Question 75 
Complete the function which converts hex number (given as a string) to a decimal number.

def hex_to_dec(s):
    return int(s, 16)

print(hex_to_dec(S)

Question 76
from functools import reduce

def grow(arr):
    return reduce(lambda x, y: x * y, arr)
    
print(grow([3,2,6,6,9]))

or

def grow(arr):
    total = 1
    for i in arr:
        total *= i
    return total
    
print(grow([3,2,6,6,9]))

Question 77
Nathan loves cycling.

Because Nathan knows it is important to stay hydrated, he drinks 0.5 litres of water per hour of cycling.

You get given the time in hours and you need to return the number of litres Nathan will drink, rounded to the smallest value.

For example:

time = 3 ----> litres = 1

time = 6.7---> litres = 3

time = 11.8--> litres = 5


from math import floor

def litres(time):
    return floor(time * 0.5)
    
print(litres(6))

or

def litres(time):
    return time // 2
    
print(litres(6))

or

def litres(time):
    return int(time/2)

print(litres(6))

or

def litres(time):
    return int(time*0.5)
    
print(litres(6))

Question 78
Create a function called that accepts 2 string arguments and returns an integer of the count of occurrences the 2nd argument is found in the first one.

If no occurrences can be found, a count of 0 should be returned.

strCount('Hello', 'o') // => 1
strCount('Hello', 'l') // => 2
strCount('', 'z')      // => 0

def str_count(strng, letter):
    count = 0
    for x in strng:
        if x == letter:
            count += 1
    return count
    
print(str_count("Hello", "o"))

or

def strCount(string, letter):
    return string.count(letter)    

print(str_count("Hello", "o"))

Question 79
Simple, remove the spaces from the string, then return the resultant string.

def no_space(x):
    return x.replace(' ' ,'')

print(no_space("She has a dog"))

or 

def no_space(x):
    return "".join(x.split())
    
print(no_space("She has a dog"))

or

def no_space(x):
    return "".join(i for i in x.split())
    
print(no_space("She has a dog"))

Question 80
We need a function that can transform a number into a string.

What ways of achieving this do you know?

Examples:
number_to_string(123) /* returns '123' */
number_to_string(999) /* returns '999' */


def number_to_string(num):
    return str(num)
    
print(number_to_string(123))

or

def number_to_string(num):
    return "{}".format(num)
    
print(number_to_string(123))    

Question 81
Given an array of integers as strings and numbers, return the sum of the array values as if all were numbers.

Return your answer as a number.

def sum_mix(arr):
    return sum(int(n) for n in arr)
    
print(sum_mix())

or

def sum_mix(arr):
    return sum(map(int, arr))
    
print(sum_mix())

Question 82
Write a function to convert a name into initials. This kata strictly takes two words with one space in between them.

The output should be two capital letters with a dot seperating them.

It should look like this:

Sam Harris => S.H

Patrick Feeney => P.F


def abbrevName(name):
    return ".".join(n[0].upper() for n in name.split())
    
print(abbreName("John mark"))

question 83
Remove n exclamation marks in the sentence from left to right. n is positive integer.

Examples
remove("Hi!",1) === "Hi"
remove("Hi!",100) === "Hi"
remove("Hi!!!",1) === "Hi!!"
remove("Hi!!!",100) === "Hi"
remove("!Hi",1) === "Hi"
remove("!Hi!",1) === "Hi!"
remove("!Hi!",100) === "Hi"
remove("!!!Hi !!hi!!! !hi",1) === "!!Hi !!hi!!! !hi"
remove("!!!Hi !!hi!!! !hi",3) === "Hi !!hi!!! !hi"
remove("!!!Hi !!hi!!! !hi",5) === "Hi hi!!! !hi"
remove("!!!Hi !!hi!!! !hi",100) === "Hi hi hi"


def remove(s, n):
    return s.replace("!", "", n)
    
print(remove())

Question 83
Write a method sum (sum_array in python, SumArray in C#) that takes an array of numbers and returns the sum of the numbers. These may be integers or decimals for Ruby and any instance of Num for Haskell. The numbers can also be negative. If the array does not contain any numbers then you should return 0.

Examples
print sum_array([1 2 3])
> 6
print sum_array([])
> 0

def sum_array(a):
  return sum(a)
  
print(sum_array())

or

def sum_array(a):
    return sum(x for x in a)

print(sum_array())

Question 84
Don Drumphet lives in a nice neighborhood, but one of his neighbors has started to let his house go. Don Drumphet wants to build a wall between his house and his neighbor’s, and is trying to get the neighborhood association to pay for it. He begins to solicit his neighbors to petition to get the association to build the wall. Unfortunately for Don Drumphet, he cannot read very well, has a very limited attention span, and can only remember two letters from each of his neighbors’ names. As he collects signatures, he insists that his neighbors keep truncating their names until two letters remain, and he can finally read them.

Your code will show Full name of the neighbor and the truncated version of the name as an array. If the number of the characters in name is equal or less than two, it will return an array containing only the name as is"


def who_is_paying(name):
    return [name, name[:2]] if len(name) > 2 else [name]

print(who_is_paying(Melissa))

or 

who_is_paying = lambda n: [n, n[:2]] if len(n)>2 else [n]

print(who_is_paying(Melissa))

or

def who_is_paying(name):
    if len(name) > 2:
        return [name, name[0:2]]
    else:
        return [name[0:len(name)]]

print(who_is_paying(Melissa))

Question 85
Very simple, given a number, find its opposite.

Examples:

1: -1
14: -14
-34: 34


def opposite(number):
  return -number
  
print(opposite(7))

Question 86
Make a simple function called greet that returns the most-famous "hello world!".

def greet():
    return "hello world!"

print(greet("hello world!"))

Question 87

def warn_the_sheep(queue):
  return 'Pls go away and stop eating my sheep' if queue[-1] == 'wolf' else f'Oi! Sheep number {queue[::-1].index("wolf")}! You are about to be eaten by a wolf!'

print(warn_the_sheep())

or

def warn_the_sheep(queue):
    i = queue[::-1].index('wolf')
    if i == 0:
        return 'Pls go away and stop eating my sheep'
    return f'Oi! Sheep number {i}! You are about to be eaten by a wolf!'
    
print(warn_the_sheep())

Question 88
Create a function isDivisible(n, x, y) that checks if a number n is divisible by two numbers x AND y. All inputs are positive, non-zero digits.


def is_divisible(n,x,y):
    return n % x == 0 and n % y == 0
    
print(is_divisible(3,1,3))

Question 89
Complete the function which returns the weekday according to the input number:

1 returns "Sunday"
2 returns "Monday"
3 returns "Tuesday"
4 returns "Wednesday"
5 returns "Thursday"
6 returns "Friday"
7 returns "Saturday"
Otherwise returns "Wrong, please enter a number between 1 and 7"

WEEKDAY = {
    1: 'Sunday',
    2: 'Monday',
    3: 'Tuesday',
    4: 'Wednesday',
    5: 'Thursday',
    6: 'Friday',
    7: 'Saturday' }
ERROR = 'Wrong, please enter a number between 1 and 7'


def whatday(n):
    return WEEKDAY.get(n, ERROR)
    
print(whatday(5))

or

def whatday(num):
  switcher = {
      1:'Sunday',
      2:'Monday',
      3:'Tuesday',
      4:'Wednesday',
      5:'Thursday',
      6:'Friday',
      7:'Saturday'
  }
  return switcher.get(num, 'Wrong, please enter a number between 1 and 7')
  
  print(whatday(5))
  
  Question 90
  Give you two strings: s1 and s2. If they are opposite, return true; otherwise, return false. Note: The result should be a boolean value, instead of a string.

The opposite means: All letters of the two strings are the same, but the case is opposite. you can assume that the string only contains letters or it's a empty string. Also take note of the edge case - if both strings are empty then you should return false/False.

#Some examples:
isOpposite("ab","AB") should return true;
isOpposite("aB","Ab") should return true;
isOpposite("aBcd","AbCD") should return true;
isOpposite("AB","Ab") should return false;
isOpposite("","") should return false;

  
  def is_opposite(s1, s2):
    return False if not(s1 or s2) else s1.swapcase() == s2
    
  print(is_opposite())
  
  or 
  
  def is_opposite(s1,s2):
    return s1!="" and s1.swapcase() == s2
    
  print(is_opposite())
  
  or
  
  def is_opposite(s1,s2):
    return s1 == s2.swapcase() if s1 else False
    
  print(is_opposite())  
  
  Question 91
  You're on your way to the market when you hear beautiful music coming from a nearby street performer. The notes come together like you wouln't believe as the musician puts together patterns of tunes. As you wonder what kind of algorithm you could use to shift octaves by 8 pitches or something silly like that, it dawns on you that you have been watching the musician for some 10 odd minutes. You ask, "How much do people normally tip for something like this?" The artist looks up. "Its always gonna be about tree fiddy."

It was then that you realize the musician was a 400 foot tall beast from the paleolithic era. The Loch Ness Monster almost tricked you!

There are only 2 guaranteed ways to tell if you are speaking to The Loch Ness Monster: A.) It is a 400 foot tall beast from the paleolithic era B.) It will ask you for tree fiddy

Since Nessie is a master of disguise, the only way accurately tell is to look for the phrase "tree fiddy". Since you are tired of being grifted by this monster, the time has come to code a solution for finding The Loch Ness Monster. Note: It can also be written as 3.50 or three fifty.
  
  
  def is_lock_ness_monster(s):
    return any(i in s for i in ('tree fiddy', 'three fifty', '3.50'))
    
  print(is_lock_ness_monster())
  
  Question 92
  Create a function that finds the integral of the expression passed.

In order to find the integral all you need to do is add one to the exponent (the second number), and divide the coefficient by that new number (the first number).

In 3x^2, for example, the integral would be 1x^3 (we added 1 to the exponent, and divided the coefficient by that new number).

integrate(3,2) // => "1x^3"
integrate(12,5) // => "2x^6"
Note that the output should be a string. The coefficient is always positive, and the result will always be an integer. Neither number will ever be 0.

  
  def integrate(coef, exp):
    exp = exp + 1
    coef = coef / exp if coef % exp else coef // exp
    return f"{coef}x^{exp}"
    
  print(integrate(3x))
  
  Question 93
  In this kata you will create a function that takes in a list and returns a list with the reverse order.

Examples
reverse_list([1,2,3,4]) == [4,3,2,1]
reverse_list([3,1,5,4]) == [4,5,1,3]


  def reverse_list(l):
    return l[::-1]
  
  print(reverse([1,2,3,4]))
  
  or
  
  def reverse_list(l):
    return list(reversed(l))
    
  print(reverse([1,2,3,4]))
  
  Question 94
  Write function RemoveExclamationMarks which removes all exclamation marks from a given string.
  
  
  def remove_exclamation_marks(s):
    return s.replace("!", "")
  
  print(remove_exclamation_marks("hello World!"))
  
  Question 95
  Your coworker was supposed to write a simple helper function to capitalize a string (that contains a single word) before they went on vacation.

Unfortunately, they have now left and the code they gave you doesn't work. Fix the helper function they wrote so that it works as intended (i.e. make the first character in the string "word" upper case).

Don't worry about numbers, special characters, or non-string types being passed to the function. The string lengths will be from 1 character up to 10 characters, but will never be empty.
  
  
  def capitalize_word(word):
    return word.capitalize()
    
  print(capitalize("table"))
  
  Question 96
  Create a function which answers the question "Are you playing banjo?".
If your name starts with the letter "R" or lower case "r", you are playing banjo!

The function takes a name as its only argument, and returns one of the following strings:

name + " plays banjo" 
name + " does not play banjo"
Names given are always valid strings.

  
  def areYouPlayingBanjo(name):
    return "{} plays banjo".format(name) if name[0].lower() == "r" else "{} does not play banjo".format(name)
    
  print(areYouPlayingBanjo("Martin"))
  
  or 
  
  def areYouPlayingBanjo(name):
    if name[0].lower() == 'r':
        return name + ' plays banjo'
    else:
        return name + ' does not play banjo'
        
  print(areYouPlayingBanjo("Martin"))
  
  or
  
  def areYouPlayingBanjo(name):
    if name[0] == 'r' or name[0] =='R':
        return ("%s plays banjo"%name)
    else:
        return ("%s does not play banjo"%name)
        
  print(areYouPlayingBanjo("Martin"))
  
  Question 97
  All of the animals are having a feast! Each animal is bringing one dish. There is just one rule: the dish must start and end with the same letters as the animal's name. For example, the great blue heron is bringing garlic naan and the chickadee is bringing chocolate cake.

Write a function feast that takes the animal's name and dish as arguments and returns true or false to indicate whether the beast is allowed to bring the dish to the feast.

Assume that beast and dish are always lowercase strings, and that each has at least two letters. beast and dish may contain hyphens and spaces, but these will not appear at the beginning or end of the string. They will not contain numerals.
  
  
  def feast(beast, dish):
    return beast[0] == dish[0] and beast[-1] == dish[-1]
    
  print(feast("great blue heron", "garlic naan"))
  
  Question 98
  Define a method hello that returns "Hello, Name!" to a given name, or says Hello, World! if name is not given (or passed as an empty String).

Assuming that name is a String and it checks for user typos to return a name with a first capital letter (Xxxx).

Examples:

hello "john"   => "Hello, John!"
hello "aliCE"  => "Hello, Alice!"
hello          => "Hello, World!" # name not given
hello ''       => "Hello, World!" # name is an empty String
  
  
  def hello(name=''):
    return "Hello, {}!".format(name.title() if name else 'World')
  
  print(hello())
  
  
Question 99
Add the value "codewars" to the websites array.
After your code executes the websites array should == ["codewars"]

The websites array has already been defined for you using the following code:

websites = []


websites = []
websites.append("codewars")

QUestion 100
Python is now supported on Codewars!

For those of us who are not very familiar with Python, let's handle the very basic challenge of creating a class named Python. We want to give our Pythons a name, so it should take a name argument that we can retrieve later.

For example:

bubba = Python('Bubba')
bubba.name # should return 'Bubba'


class Python:
  def __init__(self, name):
    self.name = name
    
    
 Question 101
 Create a class Ghost

Ghost objects are instantiated without any arguments.

Ghost objects are given a random color attribute of white" or "yellow" or "purple" or "red" when instantiated

ghost = Ghost()
ghost.color  #=> "white" or "yellow" or "purple" or "red"
 
 
 import random

class Ghost(object):
  def __init__(self):
    self.color = random.choice(["white", "yellow", "purple", "red"])
    
    
 Question 102
 Create a function called shortcut to remove all the lowercase vowels in a given string.

Examples
shortcut("codewars") # --> cdwrs
shortcut("goodbye")  # --> gdby
Don't worry about uppercase vowels.
 
 
 def shortcut( s ):
    return "".join(x for x in s if x not in "aeiou")
 
 print(shortcut("string"))
 
 or
 
 def shortcut(s):
    return s.translate(None, 'aeiou')
    
  print(shortcut("string"))
 
 Question 103
 Find the mean (average) of a list of numbers in an array.

Information
To find the mean (average) of a set of numbers add all of the numbers together and divide by the number of values in the list.

For an example list of 1, 3, 5, 7

1. Add all of the numbers

1+3+5+7 = 16
2. Divide by the number of values in the list. In this example there are 4 numbers in the list.

16/4 = 4
3. The mean (or average) of this list is 4
 
 
 def find_average(nums):
    return float(sum(nums))/len(nums) if len(nums) != 0 else 0
    
 print(find_average())
 
 Question 104
 Complete the function so that it finds the mean of the three scores passed to it and returns the letter value associated with that grade.

Numerical Score	Letter Grade
90 <= score <= 100	'A'
80 <= score < 90	'B'
70 <= score < 80	'C'
60 <= score < 70	'D'
0 <= score < 60	'F'
Tested values are all between 0 and 100. Theres is no need to check for negative values or values greater than 100.

 
 def get_grade(s1, s2, s3):
    m = (s1 + s2 + s3) / 3.0
    if 90 <= m <= 100:
        return 'A'
    elif 80 <= m < 90:
        return 'B'
    elif 70 <= m < 80:
        return 'C'
    elif 60 <= m < 70:
        return 'D'
    return "F"
    
 print(get_grade(80,65,90))
 
 or
 
 def get_grade(s1, s2, s3):
    mean = sum([s1,s2,s3])/3
    if mean>=90: return 'A'
    if mean>=80: return 'B'
    if mean>=70: return 'C'
    if mean>=60: return 'D'
    return 'F
    
  print(get_grade(80,65,90))
  
  or 
  
  def get_grade(s1, s2, s3):
    return {6:'D', 7:'C', 8:'B', 9:'A', 10:'A'}.get((s1 + s2 + s3) / 30, 'F')
    
  print(get_grade(80,65,90))
  
  Question 105
  Messi's Goal Total
Use variables to find the sum of the goals Messi scored in 3 games

Information
Messi goal scoring statistics:

Competition	Goals
La Liga	43
Champions League	10
Copa del Rey	5
Define
Create three variables and store the appropriate values using the table above:

la_liga_goals
champions_league_goals
copa_del_rey_goals
Create a fourth variable named totalGoals (javascript, C#) or total_goals (python, ruby). totalGoals/total_goals should store the sum of all of Messi's goals for this year.

  
  
  la_liga_goals = 43
  champions_league_goals = 10
  copa_del_rey_goals = 5

  total_goals = la_liga_goals + champions_league_goals + copa_del_rey_goals
  
  Question 106
  Write a function taking two parameters and returning an int array of all elements between the input parameters and including them.
  
  
  def between(a,b):
    return range(a, b+1)
    
  print(between((1,4), [1,2,3,4]))
  
  Question 107
  You are in charge of ordering food for a party. You are going to need 4 sandwiches, 6 salads, 5 wraps, and 10 orders of french fries. The cost per item of food is:

food	price
sandwich	$8.00
salad	$7.00
wrap	$6.50
french fries	$1.20
Create 4 variables to store the quantity of each type of food with the following names:

sandwiches
salads
wraps
frenchFries
Create a variable named totalPrice that finds the cost of all of the food.
  
  
  sandwiches, salads, wraps, frenchFries = 4, 6, 5, 10
  totalPrice = 8.00 * sandwiches + 7.00 * salads + 6.5 * wraps + 1.2 * frenchFries
  
  or
  
sandwiches = 4
salads = 6
wraps = 5
frenchFries = 10
totalPrice =8*sandwiches + 7*salads + 6.5*wraps + 1.2*frenchFries

Question 108
Get change
You go to the store and have a 10 dollar bill to spend. You buy candy, chips, and soda. Find out how much change you get back from the cashier.

Item	Cost
Candy	$1.42
Chips	$2.40
Soda	$1.00
Create 5 variables and use the cost from the table above to set their values.

money
candy
chips
soda
change


money = 10
candy = 1.42
chips = 2.40
soda = 1
change = money - (candy + chips + soda)

Question 109
Given a string, you have to return a string in which each character (case-sensitive) is repeated once.

double_char("String") ==> "SSttrriinngg"

double_char("Hello World") ==> "HHeelllloo  WWoorrlldd"

double_char("1234!_ ") ==> "11223344!!__  "


def double_char(s):
    return ''.join(x * 2 for x in s)
    
print(double_char("String"))

Question 110
This is a spin off of my first kata. You are given a list of character sequences as a comma separated string. Write a function which returns another string containing all the character sequences except the first and the last ones. If the input string is empty, or the removal of the first and last items would cause the string to be empty, return a null value.


def array(strng):
    return ' '.join(strng.split(',')[1:-1]) or None
    
print(array())

question 111
This series of katas will introduce you to basics of doing geometry with computers.

Point objects have x and y attributes (X and Y in C#) attributes.

Write a function calculating distance between Point a and Point b.

Tests round answers to 6 decimal places.


def distance_between_points(a, b):

    return ((b.x - a.x) ** 2 + (b.y - a.y) ** 2) ** 0.5

print(distance_between_points(2,9))

or

import math


def distance_between_points(a, b):
    return math.sqrt((a.x - b.x)**2 + (a.y - b.y)**2)
    
print(distance_between_points(2,9))

or

from math import hypot

def distance_between_points(a, b):
    return hypot(a.x - b.x, a.y - b.y)
    
print(distance_between_points(2,9))

Question 112
This is the first step to understanding FizzBuzz.

Your inputs: a positive integer, n, greater than or equal to one. n is provided, you have NO CONTROL over its value.

Your expected outputs: an array of positive integers from 1 to n

Your job is to write an algorithm that gets you from the input to the output.


def pre_fizz(n):
    return list(range(1,n+1))

print(pre_fizz(8))

or

def pre_fizz(n):
    return [x for x in range(1, n+1)]
    
print(pre_fizz(8))

Question 113
In this kata, we will make a function to test whether a period is late.

Our function will take three parameters:

last - The Date object with the date of the last period

today - The Date object with the date of the check

cycleLength - Integer representing the length of the cycle in days

If the today is later from last than the cycleLength, the function should return true. We consider it to be late if the number of passed days is larger than the cycleLength. Otherwise return false.


def period_is_late(last, today, cycle_length):
    return (today - last).days > cycle_length
    
print(period_is_late())

or

def period_is_late(last,today,cycle_length):
    change = today - last
    if change.days > cycle_length:
        return True
    else:
        return False

print(period_is_late())

Question 114
Basic regex tasks. Write a function that takes in a numeric code of any length. The function should check if the code begins with 1, 2, or 3 and return true if so. Return false otherwise.

You can assume the input will always be a number.


def validate_code(code):
    return str(code).startswith(('1', '2', '3'))
    
print(validate_code())

or

def validate_code(code):
    return str(code)[0] in '123'

print(validate_code())

or

def validate_code(code):
    return int(str(code)[0]) < 4
    
print(validate_code())

Question 115
Kids drink toddy.
Teens drink coke.
Young adults drink beer.
Adults drink whisky.
Make a function that receive age, and return what they drink.

Rules:

Children under 14 old.
Teens under 18 old.
Young under 21 old.
Adults have 21 or more.
Examples:

people_with_age_drink(13) == "drink toddy"
people_with_age_drink(17) == "drink coke"
people_with_age_drink(18) == "drink beer"
people_with_age_drink(20) == "drink beer"
people_with_age_drink(30) == "drink whisky"


def people_with_age_drink(age):
    if age > 20: return 'drink whisky'
    if age > 17: return 'drink beer'
    if age > 13: return 'drink coke'
    return 'drink toddy'
    
print(people_with_age_drink(19))

or

def people_with_age_drink(age):
    return 'drink ' + ('toddy' if age < 14 else 'coke' if age < 18 else 'beer' if age < 21 else 'whisky')

print(people_with_age_drink(19))

or

def people_with_age_drink(age):
    if age <= 13:
        beverage = 'toddy'
    elif age > 13 and age <= 17:
        beverage = 'coke'
    elif age > 17 and age <= 20:
        beverage = 'beer'
    elif age > 20:
        beverage = 'whisky'
    return 'drink ' + beverage

print(people_with_age_drink(19))

Question 116
Some new animals have arrived at the zoo. The zoo keeper is concerned that perhaps the animals do not have the right tails. To help her, you must correct the broken function to make sure that the second argument (tail), is the same as the last letter of the first argument (body) - otherwise the tail wouldn't fit!

If the tail is right return true, else return false.

The arguments will always be strings, and normal letters.

For Haskell, more specifically, body has the type of String and tail has the type of Char.


def correct_tail(body, tail):
    return body[-1] == tail
    
print(correct_tail())

or

def correct_tail(body, tail):
    return body.endswith(tail)
    
print(correct_tail())

Question 117
Remove all exclamation marks from the end of sentence.

Examples
remove("Hi!") === "Hi"
remove("Hi!!!") === "Hi"
remove("!Hi") === "!Hi"
remove("!Hi!") === "!Hi"
remove("Hi! Hi!") === "Hi! Hi"
remove("Hi") === "Hi


def remove(s):
    return s.rstrip("!")

print(remove("hello!!!"))

Question 118
Write a function that returns a string in which firstname is swapped with last name.

name_shuffler('john McClane'); => "McClane john"


def name_shuffler(str_):
    return " ".join(str_.split()[::-1])
    
print(name_shuffler("john McClane"))

or

def name_shuffler(s):
    return ' '.join(reversed(s.split()))
    
print(name_shuffler("john McClane"))

Question 119
Create a function close_compare that accepts 3 parameters: a, b, and margin. The function should return whether a is lower than, close to, or higher than b. a is "close to" b if margin is higher than or equal to the difference between a and b.

When a is lower than b, return -1.

When a is higher than b, return 1.

When a is close to b, return 0.

If margin is not given, treat it as zero.

Example: if a = 3, b = 5 and the margin = 3, since a and b are no more than 3 apart, close_compare should return 0. Otherwise, if instead margin = 0, a is lower than b and close_compare should return -1.

Assume: margin >= 0


def close_compare(a, b, margin = 0):
    return 0 if abs(a - b) <= margin else -1 if b > a else 1
    
print(close_compare())

Question 120
Create a method that accepts a list and an item, and returns true if the item belongs to the list, otherwise false.


def include(arr,item):
    return item in arr
    
print(include())

Question 121
Given two integer arrays a, b, both of length >= 1, create a program that returns true if the sum of the squares of each element in a is strictly greater than the sum of the cubes of each element in b.

E.g.

array_madness([4, 5, 6], [1, 2, 3]) => True #because 4 ** 2 + 5 ** 2 + 6 ** 2 > 1 ** 3 + 2 ** 3 + 3 ** 3
Get your timer out. Are you ready? Ready, get set, GO!!!


def array_madness(a,b):
    return sum(x ** 2 for x in a) > sum(x **3 for x in b)
    
print(array_madness([4, 5, 6], [1, 2, 3]))

Question 122
You're running an online business and a big part of your day is fulfilling orders. As your volume picks up that's been taking more of your time, and unfortunately lately you've been running into situations where you take an order but can't fulfill it.

You've decided to write a function fillable() that takes three arguments: a dictionary stock representing all the merchandise you have in stock, a string merch representing the thing your customer wants to buy, and an integer n representing the number of units of merch they would like to buy. Your function should return True if you have the merchandise in stock to complete the sale, otherwise it should return False.

Valid data will always be passed in and n will always be >= 1.


def fillable(stock, merch, n):
  return stock.get(merch, 0) >= n

print(fillable())

or

def fillable(stock, merch, n):
    return merch in stock and stock[merch] >= n
    
print(fillable())

Question 123
Simple challenge - eliminate all bugs from the supplied code so that the code runs and outputs the expected value. Output should be the length of the longest word, as a number.

There will only be one 'longest' word.


def find_longest(strng):
    return max(len(a) for a in strng.split())
    
print(find_longest())

Question 124
A hero is on his way to the castle to complete his mission. However, he's been told that the castle is surrounded with a couple of powerful dragons! each dragon takes 2 bullets to be defeated, our hero has no idea how many bullets he should carry.. Assuming he's gonna grab a specific given number of bullets and move forward to fight another specific given number of dragons, will he survive?

Return True if yes, False otherwise :)


def hero(bullets, dragons):
    return bullets / 2 >= dragons

print(hero())

Question 125
Remove a exclamation mark from the end of string. For a beginner kata, you can assume that the input data is always a string, no need to verify it.

Examples
remove("Hi!") === "Hi"
remove("Hi!!!") === "Hi!!"
remove("!Hi") === "!Hi"
remove("!Hi!") === "!Hi"
remove("Hi! Hi!") === "Hi! Hi"
remove("Hi") === "Hi"


def remove(s):
    return s[:-1] if s.endswith('!') else s
    
print(remove())

Question 126
You were camping with your friends far away from home, but when it's time to go back, you realize that you fuel is running out and the nearest pump is 50 miles away! You know that on average, your car runs on about 25 miles per gallon. There are 2 gallons left. Considering these factors, write a function that tells you if it is possible to get to the pump or not. Function should return true if it is possible and false if not.


def zeroFuel(distance_to_pump, mpg, fuel_left):
    return distance_to_pump <= mpg * fuel_left
    
print(zeroFuel())

Question 127
I'm new to coding and now I want to get the sum of two arrays...actually the sum of all their elements. I'll appreciate for your help.

P.S. Each array includes only integer numbers. Output is a number too.


def array_plus_array(arr1,arr2):
    return sum(arr1) + sum(arr2)
    
print(array_plus_array())

or

def array_plus_array(arr1,arr2):
    return sum(arr1+arr2)

print(array_plus_array())

Question 128
Who likes keywords? Nobody likes keywords, so why use them?

You know what keyword I use too much? if! We should make a function called _if, with its arguments as a logical test and two functions/lambdas where the first function is executed if the boolean is true, and the second if it's false, like an if/else statement, so that we don't have to mess around with those nasty keywords! Even so, It should support truthy/falsy types just like the keyword.


def _if(bool, func1, func2):
    return func1() if bool else func2()

print(_if())
